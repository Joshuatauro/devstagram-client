[{"C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\index.js":"1","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\App.js":"2","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\Navbar\\Navbar.jsx":"3","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\Context\\AuthContext.js":"4","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\Firebase\\firebase.js":"5","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\SignUp\\SignUp.jsx":"6","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\Reusable\\Buttons\\Buttons.jsx":"7","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\Home\\Home.jsx":"8","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\Reusable\\Post\\Post.jsx":"9","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\CreatePost\\Create.jsx":"10","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\SinglePost\\SinglePostPage.jsx":"11","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\SinglePost\\PostContent\\PostContent.jsx":"12","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\SinglePost\\PostForm\\PostForm.jsx":"13","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\Login\\Login.jsx":"14","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\SinglePost\\PostComments\\PostComments.jsx":"15","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\Reusable\\Comment\\Comment.jsx":"16","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\Context\\CommentContext.js":"17","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\Reusable\\LikeButton\\LikeButton.jsx":"18","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\SingleSubreddit\\SingleSubreddit.jsx":"19","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\Reusable\\SubredditAbout\\SubredditAbout.jsx":"20","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\PrivateFeed\\PrivateFeed.jsx":"21","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\UserProfile\\UserProfile.jsx":"22","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\UserProfile\\UserProfileContent\\UserProfileContent.jsx":"23","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\UserProfile\\UserProfileSide\\UserProfileSide.jsx":"24"},{"size":456,"mtime":1611408212517,"results":"25","hashOfConfig":"26"},{"size":1642,"mtime":1612700091698,"results":"27","hashOfConfig":"26"},{"size":2327,"mtime":1613469574927,"results":"28","hashOfConfig":"26"},{"size":1296,"mtime":1611986011802,"results":"29","hashOfConfig":"26"},{"size":491,"mtime":1613384447480,"results":"30","hashOfConfig":"26"},{"size":1997,"mtime":1611992164356,"results":"31","hashOfConfig":"26"},{"size":642,"mtime":1613383319146,"results":"32","hashOfConfig":"26"},{"size":1532,"mtime":1613409817862,"results":"33","hashOfConfig":"26"},{"size":1429,"mtime":1613409920696,"results":"34","hashOfConfig":"26"},{"size":6413,"mtime":1613419789727,"results":"35","hashOfConfig":"26"},{"size":569,"mtime":1611396115567,"results":"36","hashOfConfig":"26"},{"size":5378,"mtime":1613420142399,"results":"37","hashOfConfig":"26"},{"size":1786,"mtime":1611411754380,"results":"38","hashOfConfig":"26"},{"size":1728,"mtime":1611944296899,"results":"39","hashOfConfig":"26"},{"size":1357,"mtime":1613466007506,"results":"40","hashOfConfig":"26"},{"size":2710,"mtime":1613467165912,"results":"41","hashOfConfig":"26"},{"size":1302,"mtime":1613467152282,"results":"42","hashOfConfig":"26"},{"size":2977,"mtime":1612710050578,"results":"43","hashOfConfig":"26"},{"size":1992,"mtime":1611992345373,"results":"44","hashOfConfig":"26"},{"size":2250,"mtime":1612769152845,"results":"45","hashOfConfig":"26"},{"size":1552,"mtime":1611986343395,"results":"46","hashOfConfig":"26"},{"size":604,"mtime":1613298758370,"results":"47","hashOfConfig":"26"},{"size":1126,"mtime":1613240720936,"results":"48","hashOfConfig":"26"},{"size":3235,"mtime":1613464860632,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},"pzz3eb",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"53"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"53"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"53"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"53"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"53"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"53"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"53"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"53"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"53"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"53"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"53"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"53"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"53"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"53"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"53"},"C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\index.js",["115"],"import { ChakraProvider } from '@chakra-ui/react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { CommentContext, CommentContextProvider } from './Components/Context/CommentContext';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <CommentContextProvider >\n        <App />\n      </CommentContextProvider>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n",["116","117"],"C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\App.js",[],"C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\Navbar\\Navbar.jsx",["118","119","120"],"C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\Context\\AuthContext.js",[],"C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\Firebase\\firebase.js",["121"],"import firebase from 'firebase'\r\nimport 'firebase/auth'\r\n\r\nconst app = firebase.initializeApp({\r\n  apiKey: \"AIzaSyCxkufqsXB9CDUdwaDgNwbC1LNHqv-b5dw\",\r\n  authDomain: \"memories-fedd4.firebaseapp.com\",\r\n  projectId: \"memories-fedd4\",\r\n  storageBucket: \"memories-fedd4.appspot.com\",\r\n  messagingSenderId: \"73933300893\",\r\n  appId: \"1:73933300893:web:c7c8247b5683d1d4af2074\",\r\n  measurementId: \"G-5MXCFDHY5H\"\r\n});\r\n\r\nexport const storage = firebase.storage()\r\nexport const auth = firebase.auth()\r\n","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\SignUp\\SignUp.jsx",[],"C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\Reusable\\Buttons\\Buttons.jsx",[],"C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\Home\\Home.jsx",["122"],"import React, {useState, useEffect,useContext} from 'react'\r\nimport axios from 'axios'\r\nimport { Skeleton, Stack } from '@chakra-ui/react'\r\nimport Post from '../Reusable/Post/Post'\r\nimport { AuthContext } from '../Context/AuthContext'\r\nimport './Home.css'\r\n\r\nconst Home = () => {\r\n  const { BASE_URL } = useContext(AuthContext)\r\n\r\n  const [posts, setPosts] = useState([])\r\n  const [loading, isLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n\r\n\r\n    const fetchData = async() => {\r\n      const posts = await axios.get(`${BASE_URL}/posts`)\r\n      const postArr = posts.data.data.posts\r\n\r\n      setPosts(postArr) \r\n      isLoading(false)\r\n\r\n    }\r\n\r\n    fetchData()\r\n  }, [])\r\n  return (\r\n    <section className=\"home\">\r\n      <div className=\"home__container\">\r\n        <div className=\"home__posts\">\r\n          {loading ? (\r\n            <>\r\n              <Stack>\r\n                <Skeleton height=\"20px\" />\r\n                <Skeleton height=\"20px\" />\r\n                <Skeleton height=\"20px\" />\r\n\r\n              </Stack>\r\n            </>\r\n          ) : (\r\n            <>\r\n              {posts.map(post => {\r\n                console.log(post)\r\n                return(\r\n                  \r\n                  <Post postID={post.postid} img={post.img_url}  username={post.username} title={post.title} content={post.content} subreddit={post.subreddit} createdAt={post.createdat}/>\r\n                )\r\n              })}\r\n            </>\r\n          )}\r\n          \r\n        </div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Home","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\Reusable\\Post\\Post.jsx",["123","124"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './Post.css'\r\nimport moment from 'moment'\r\n\r\nimport axios from 'axios'\r\n\r\nconst Post = ({postID,username,title,content,subreddit,createdAt, img}) => {\r\n\r\n  const [post, setPost] = React.useState('')\r\n\r\n  React.useEffect(() => {\r\n    setPost(content.replace(/\\n/g, '\\n'))\r\n  }, [])\r\n  return (\r\n    <article className=\"post\">\r\n      <div className=\"post__container\">\r\n        <div className=\"post__row\">\r\n          <div className=\"post__subreddit\">\r\n            <Link to={`/subreddit/${subreddit}`}>\r\n              <h1>TD/{subreddit}</h1>\r\n            </Link>\r\n          </div>\r\n          <div className=\"post__user\">\r\n            <Link to={`/user/${username}`}>\r\n              <h3>u/{username} posted this {moment(createdAt).fromNow()}</h3>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"post__row\">\r\n          <div className=\"post__title\">\r\n            <Link to={`/post/${postID}`}>\r\n              <h1>{title}</h1>\r\n            </Link>\r\n          </div>\r\n          {\r\n            img ? (\r\n              <div className=\"post__img\">\r\n                <img src={img} alt=\"\"/>\r\n              </div>\r\n            ): (\r\n              <div className=\"post__content\">\r\n                <p>{post}</p>\r\n              </div>\r\n            )\r\n          }\r\n        </div>\r\n      </div>\r\n    </article>\r\n  )\r\n}\r\n\r\nexport default Post\r\n","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\CreatePost\\Create.jsx",["125","126"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport axios from 'axios'\r\nimport {  IconButton, Progress, Select, Tab, TabList, TabPanel, TabPanels, Tabs, useToast } from '@chakra-ui/react'\r\nimport { AuthContext } from '../Context/AuthContext'\r\nimport { ActionButton } from '../Reusable/Buttons/Buttons'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { AiFillFileText } from 'react-icons/ai'\r\nimport { BsImageFill } from 'react-icons/bs'\r\nimport './Create.css'\r\nimport { storage } from '../Firebase/firebase'\r\n\r\nconst CreatePost = () => {\r\n  const history = useHistory()\r\n  const toast = useToast()\r\n  const { currentUser, BASE_URL } = useContext(AuthContext)\r\n\r\n  const [subreddits, setSubreddits] = useState([])\r\n\r\n  const [title, setTitle] = useState('')\r\n  const [content, setContent] = useState('')\r\n  const [selectedSubreddit, setSelectedSubreddit] = useState('All')\r\n\r\n  const [fileContent, setFileContent] = useState()\r\n  const [imgProgress, setImgProgress] = useState()\r\n\r\n\r\n  const handleImgSelect = (e) => {\r\n      if(e.target.files[0]){\r\n        setFileContent(e.target.files[0])\r\n    }\r\n  }\r\n\r\n  const handleSubmit = async(e) => {\r\n    e.preventDefault()\r\n    if(currentUser.uid){\r\n\r\n      if(fileContent) {\r\n        const uploadToStorage = storage.ref(`posts/${currentUser.displayName}/${fileContent.name}`).put(fileContent)\r\n\r\n        uploadToStorage.on(\r\n          'state_changed',\r\n          (snapshot) => {\r\n            let progressImgCompleted = (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n            setImgProgress(progressImgCompleted)\r\n          },\r\n          (err) => {\r\n            alert(err.message)\r\n          },\r\n          async() => {\r\n            const imageDownloadURL = await uploadToStorage.snapshot.ref.getDownloadURL()\r\n            const formatDetails = await {\r\n              title,\r\n              content ,\r\n              subreddit: selectedSubreddit,\r\n              userName: currentUser.displayName,\r\n              downloadURL: imageDownloadURL\r\n            }\r\n            const response = await axios.post(`${BASE_URL}/posts/add`, formatDetails)\r\n            history.push(`/post/${response.data.postID}`)\r\n          }\r\n        )\r\n      } else {\r\n        const formatDetails = await {\r\n          title,\r\n          content ,\r\n          subreddit: selectedSubreddit,\r\n          userName: currentUser.displayName,\r\n        }\r\n        \r\n        try{\r\n          const response = await axios.post(`${BASE_URL}/posts/add`, formatDetails)\r\n          history.push(`/post/${response.data.postID}`)\r\n        } catch(err){\r\n          alert('Something went wrong')\r\n        }\r\n      }\r\n\r\n      \r\n\r\n    } else {\r\n      toast({\r\n        title: \"Failed to add post\",\r\n        description: \"You need to create an account to post \",\r\n        status: \"error\",\r\n        duration: 9000,\r\n        isClosable: true,\r\n      })\r\n      \r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchSubreddits = async() => {\r\n      const subreddits = await axios.get(`${BASE_URL}/subreddits`)\r\n      setSubreddits(subreddits.data.subreddits.map(subreddit => subreddit.subreddit))\r\n    }\r\n\r\n    fetchSubreddits()\r\n  }, [])\r\n  return (\r\n    <section className=\"create\">\r\n      <div className=\"create__container\">\r\n\r\n        <div className=\"create__form\">\r\n\r\n        \r\n          <Tabs variant='enclosed'size='lg'>\r\n            <TabList>\r\n              <Tab color='#4FD1C5'_active='#4FD1C5'>\r\n                <AiFillFileText />\r\n              </Tab>\r\n              <Tab color='#4FD1C5'>\r\n                <BsImageFill/>\r\n              </Tab>\r\n            </TabList>\r\n            <TabPanels>\r\n              <TabPanel>\r\n                <form onSubmit={handleSubmit}  className=\"create__form\">\r\n                  <div className=\"create__input\">\r\n                    <input type=\"text\" required value={title} onChange={e => setTitle(e.target.value)}/>\r\n                    <label className=\"create__label\">Title</label>\r\n                  </div>\r\n                  <Select value={selectedSubreddit} onChange={e => setSelectedSubreddit(e.target.value)} variant=\"filled\" bg='#4FD1C5' color=\"black\" _hover={{bg: \"#4FD1C5\"}} _focus={{bg: \"#4FD1C5\"}}>\r\n                    {\r\n                      subreddits.map((subreddit) => {\r\n                        return(\r\n                          <option value={subreddit}>{subreddit}</option>\r\n                        )\r\n                      })\r\n                    }\r\n                  </Select>\r\n                  <div className=\"create__input\">\r\n                    <textarea type=\"text\" required value={content} onChange={e => setContent(e.target.value)}/>\r\n                    <label className=\"create__label\">Text</label>\r\n                  </div>\r\n                  <ActionButton type='submit' buttonText=\"Submit\" buttonVariant=\"filled\" buttonColor=\"blue\" buttonSize=\"md\" />\r\n                  </form>\r\n              </TabPanel>\r\n              \r\n              <TabPanel>\r\n                <form onSubmit={handleSubmit}  className=\"create__form\">\r\n                  <div className=\"create__input\">\r\n                      <input type=\"text\" required value={title} onChange={e => setTitle(e.target.value)}/>\r\n                      <label className=\"create__label\">Title</label>\r\n                    </div>\r\n                    <Select value={selectedSubreddit} onChange={e => setSelectedSubreddit(e.target.value)} variant=\"filled\" bg='#4FD1C5' color=\"black\" _hover={{bg: \"#4FD1C5\"}} _focus={{bg: \"#4FD1C5\"}}>\r\n                      {\r\n                        subreddits.map((subreddit) => {\r\n                          return(\r\n                            <option value={subreddit}>{subreddit}</option>\r\n                          )\r\n                        })\r\n                      }\r\n                    </Select>\r\n\r\n                    <div className=\"create__input__img\">    \r\n                      <input name='myname' required type=\"file\" accept='image/*' onChange={handleImgSelect} />\r\n                      <Progress value={imgProgress} borderRadius='5px' />\r\n                    </div>\r\n                  <ActionButton name='myname' type='submit' buttonText=\"Submit\" buttonVariant=\"filled\" buttonColor=\"blue\" buttonSize=\"md\" />\r\n\r\n                </form>\r\n              \r\n              </TabPanel>\r\n            </TabPanels>\r\n          </Tabs>\r\n          </div>\r\n\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default CreatePost\r\n","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\SinglePost\\SinglePostPage.jsx",[],"C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\SinglePost\\PostContent\\PostContent.jsx",["127"],"import React, {useState, useEffect, useContext} from 'react'\r\nimport axios from 'axios'\r\nimport {Link, useHistory, useParams } from 'react-router-dom'\r\nimport moment from 'moment'\r\nimport LikeButton from '../../Reusable/LikeButton/LikeButton'\r\nimport { AuthContext } from '../../Context/AuthContext'\r\nimport { ActionButton } from '../../Reusable/Buttons/Buttons'\r\nimport { useToast } from '@chakra-ui/react'\r\n\r\nimport './PostContent.css'\r\n\r\nconst SinglePostContent = () => {\r\n  const history = useHistory()\r\n  const toast = useToast()\r\n\r\n  const { currentUser } = useContext(AuthContext)\r\n  const { BASE_URL } = useContext(AuthContext)\r\n\r\n  const {postID} = useParams()\r\n  const [username, setUserName] = useState('')\r\n  const [subreddit, setSubreddit] = useState('')\r\n  const [createdAt, setCreatedAt] = useState('')\r\n  const [title, setTitle] = useState('')\r\n  const [content, setContent] = useState('')\r\n  const [imgURL, setImgURL] = useState()\r\n\r\n  const [isEditing, setIsEditing] = useState(false)\r\n  const [isOwner, setIsOwner] = useState(false)\r\n\r\n  const handleAction = async(type) => {\r\n    switch (type) {\r\n      case 'UPDATE':\r\n        const formattedData = {\r\n          postID,\r\n          content\r\n        }\r\n\r\n        const details = await axios.put(`${BASE_URL}/posts/update/${postID}`, formattedData)\r\n        toast(\r\n          {\r\n            title: details.data.message,\r\n            status: \"success\",\r\n            duration: 4000,\r\n            isClosable: true,\r\n          }\r\n        )\r\n        setIsEditing(false)\r\n        break;\r\n    \r\n      case 'DELETE':\r\n        axios.delete(`${BASE_URL}/posts/delete/${postID}`)\r\n          .then(() => {\r\n            history.push('/')\r\n          })\r\n        break\r\n        \r\n      default:\r\n        setIsEditing(false)\r\n        break;\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const getPostContent = async() => {\r\n      const postContent = await axios.get(`${BASE_URL}/posts/${postID}`)\r\n\r\n      const { subreddit,username,title,content,createdat,img_url } = postContent.data.data.post\r\n      setSubreddit(subreddit)\r\n      setUserName(username)\r\n      setTitle(title)\r\n      setImgURL(img_url)\r\n\r\n      setContent(content.replace(/\\n/g, '\\n'))\r\n      setCreatedAt(createdat)\r\n    }\r\n    getPostContent()\r\n\r\n    currentUser?.displayName === username ? setIsOwner(true) : setIsOwner(false) \r\n  }, [])\r\n\r\n  return (\r\n    <section className=\"single-post-content\">\r\n      <div className=\"single-post-content__container\">\r\n        <div className=\"single-post-content__post-details\">\r\n          <Link to={`/subreddit/${subreddit}`}>\r\n            <h2 className=\"single-post-content__subreddit\">\r\n              TP/{subreddit} {isOwner}\r\n            </h2>\r\n          </Link>\r\n          <Link to={`/user/${username}`}>\r\n            <h3 className=\"single-post-content__username\">\r\n              By u/{username} {moment(createdAt).fromNow()}\r\n            </h3>\r\n          </Link>\r\n        </div>\r\n        <div className=\"single-post-content__post-content\">\r\n          <h1 className=\"single-post-content__title\">\r\n            {title}\r\n          </h1>\r\n          {\r\n            isEditing ? (\r\n              <div className='single-post-content__editing'>\r\n                {imgURL ? (\r\n                  <div className='single-post-content__img'>\r\n                    <img src={imgURL} alt=\"\"/>\r\n                  </div>\r\n                ) : (\r\n                  <textarea className=\"single-post-content__textarea\" value={content} onChange={e => setContent(e.target.value)}/>\r\n                )\r\n              }\r\n                <div className=\"single-post-content__buttons\">\r\n                  {\r\n                    imgURL ? (\r\n                      ''\r\n                    ) : (\r\n                      <div onClick={() => handleAction('UPDATE')}>\r\n                        <ActionButton buttonText='Update' buttonVariant='filled' buttonSize='md' />\r\n                      </div>\r\n                    )\r\n                  }\r\n                  \r\n                  <div onClick={() => setIsEditing(false)}>\r\n                    <ActionButton buttonText='Cancel' buttonVariant='filled' buttonSize='md'/>\r\n                  </div>\r\n                  <div onClick={() => handleAction('DELETE')}>\r\n                  <ActionButton buttonText='Delete' buttonVariant='outlined' buttonSize='md' />\r\n                  </div>\r\n\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"single-post-content__not-editing\">\r\n                {\r\n                  imgURL ? (\r\n                    <div className='single-post-content__img'>\r\n                      <img src={imgURL} alt=\"\"/>\r\n                    </div>\r\n                  ) : (\r\n                    <>\r\n                      <p className=\"single-post-content__para\">\r\n                        {content}\r\n                      </p>\r\n                      \r\n                    </>\r\n                  )\r\n                }\r\n                {currentUser.displayName === username || currentUser.displayName === 'Joshua_45'? (\r\n                        <button className=\"single-post-content__edit\" onClick={() => setIsEditing(true)}>Edit</button>\r\n                ) : ('')}\r\n              </div>\r\n            )\r\n          }\r\n          <LikeButton postID={postID}/>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default SinglePostContent","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\SinglePost\\PostForm\\PostForm.jsx",[],"C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\Login\\Login.jsx",["128"],"import { useToast } from '@chakra-ui/react'\r\nimport React, { useState, useContext } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { AuthContext } from '../Context/AuthContext'\r\nimport { ActionButton } from '../Reusable/Buttons/Buttons'\r\n\r\nimport '../SignUp/SignUp.css'\r\n\r\nconst Login = () => {\r\n  const toast = useToast()\r\n  const history = useHistory()\r\n  const { logIn, currentUser } = useContext(AuthContext)\r\n\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n\r\n\r\n  const handleSubmit = async(e) => {\r\n    e.preventDefault()\r\n\r\n    const isSuccess = await logIn(email,password)\r\n    if(isSuccess.user){\r\n      history.push('/')\r\n      toast({\r\n        title: \"Success\",\r\n        description: `Hey, welcome back`,\r\n        status: \"success\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      })\r\n\r\n\r\n    }\r\n  }\r\n\r\n  return (\r\n    <section className=\"signup\">\r\n      <div className=\"signup__container\">\r\n        <form onSubmit={handleSubmit} className=\"signup__form\">\r\n\r\n          <div className=\"signup__form__input\">\r\n            <input type=\"text\" value={email} onChange={e => setEmail(e.target.value)} required/>\r\n            <label className=\"signup__form__label\">Email</label>\r\n          </div>\r\n          <div className=\"signup__form__input\">\r\n            <input type=\"password\" value={password} onChange={e => setPassword(e.target.value)} required/>\r\n            <label className=\"signup__form__label\">Password</label>\r\n          </div>\r\n          <ActionButton buttonText=\"Submit\" buttonSize=\"lg\" buttonVariant=\"filled\" buttonColor=\"blue\" onSubmit={handleSubmit}/>\r\n        </form>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Login\r\n","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\SinglePost\\PostComments\\PostComments.jsx",["129","130"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport axios from 'axios'\r\nimport { useParams } from 'react-router-dom'\r\nimport Comment from '../../Reusable/Comment/Comment'\r\n\r\nimport './PostComments.css'\r\nimport { CommentContext } from '../../Context/CommentContext'\r\nimport { AuthContext } from '../../Context/AuthContext'\r\n\r\nconst PostComments = () => {\r\n  const { BASE_URL } = useContext(AuthContext)\r\n  const { comments, storeComments } = useContext(CommentContext)\r\n  const { postID } = useParams()\r\n\r\n  // const [comments, setComments] = useState([])\r\n\r\n  useEffect(() => {\r\n    const getComments = async() => {\r\n      const fetchComments = await axios.get(`${BASE_URL}/comments/${postID}`)\r\n      storeComments([...fetchComments.data.data.comments])\r\n    }\r\n    getComments()\r\n  }, [])  \r\n  return (\r\n    <section className=\"post-comments\">\r\n      <div className=\"post-comments__container\">\r\n        <h1 className=\"post-comments__title\">Comments</h1>\r\n        {\r\n          comments.map(comment => {\r\n\r\n            return(\r\n              <Comment key={comment.comment_id} profileURL={comment.profile_url} userName={comment.username} createdAt={comment.createdAt} content={comment.content} commentID={comment.comment_id} />\r\n            )\r\n          })\r\n        } \r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default PostComments\r\n","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\Reusable\\Comment\\Comment.jsx",[],"C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\Context\\CommentContext.js",["131","132","133"],"import React,{ createContext, useReducer, useState } from 'react'\r\nimport axios from 'axios'\r\n\r\nexport const CommentContext = createContext()\r\nconst BASE_URL = 'http://localhost:5000'\r\nexport const CommentContextProvider = ({children}) => {\r\n\r\n  const [comments, setComments] = useState([])\r\n\r\n  const deleteComment = async(commentID) => {\r\n    const deleteComment = await axios.delete(`${BASE_URL}/comments/${commentID}`) \r\n    setComments(comments.filter(comment => commentID !== comment.comment_id))\r\n  }\r\n\r\n  const updateComment = async(commentID, content, imageURL) => {\r\n    const formatted = {\r\n      imageURL,\r\n      commentID,\r\n      content\r\n    }\r\n    const updatedComment = await axios.put(`${BASE_URL}/comments/${commentID}`, formatted)\r\n    setComments([...comments, comments.map(comment => comment.comment_id === commentID ? comment.content = content : comment)])\r\n  } \r\n\r\n  const addComment = comment => {\r\n    setComments([comment,...comments])\r\n  }\r\n\r\n  const storeComments = commentsArray => {\r\n    setComments(commentsArray)\r\n  } \r\n\r\n  \r\n\r\n  return(\r\n    <CommentContext.Provider value={\r\n      {\r\n        comments,\r\n        storeComments,\r\n        deleteComment,\r\n        addComment,\r\n        updateComment\r\n      }\r\n    }>\r\n      {children}\r\n    </CommentContext.Provider>\r\n  )\r\n}","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\Reusable\\LikeButton\\LikeButton.jsx",["134","135"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport axios from 'axios'\r\nimport { useParams } from 'react-router-dom'\r\nimport { AuthContext } from '../../Context/AuthContext'\r\nimport { useToast } from '@chakra-ui/react'\r\nimport './LikeButton.css'\r\n\r\nconst LikeButton = () => {\r\n  const {postID} = useParams()\r\n  const toast = useToast()\r\n  const {currentUser, BASE_URL } = useContext(AuthContext)\r\n  const [didUSerLike, setDidUserLike] = useState()\r\n  const [numOfLikes, setNumOfLikes] = useState()\r\n\r\n\r\n  const likePost = async() => {\r\n    console.log(currentUser)\r\n    if(await currentUser){\r\n\r\n      const formattedDetails = {\r\n        userName: await currentUser.displayName,\r\n        postID\r\n      }\r\n      console.log(formattedDetails)\r\n  \r\n      axios.post(`${BASE_URL}/likes/add`,formattedDetails)\r\n      setNumOfLikes(numOfLikes+1)\r\n      setDidUserLike(true)\r\n    } else {\r\n      toast({\r\n        title: \"Cannot cast vote\",\r\n        description: \"You need to create an account to like/dislike a post\",\r\n        status: \"error\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  const dislikePost = async() => {\r\n    if(currentUser){  \r\n      const formattedDetails = {\r\n        userName: await currentUser.displayName,\r\n        postID\r\n      }\r\n      const userName = await currentUser.displayName\r\n      console.log(formattedDetails)\r\n      axios.post(`${BASE_URL}/likes/dislike`,formattedDetails)\r\n      setNumOfLikes(numOfLikes-1)\r\n      setDidUserLike(false)\r\n    } else {\r\n      toast({\r\n        title: \"Cannot cast vote\",\r\n        description: \"You need to create an account to like post\",\r\n        status: \"error\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      })\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(currentUser){\r\n\r\n      const fetchLikes = async() => {\r\n        const fetch = await axios.get(`${BASE_URL}/likes/${postID}`)\r\n        const likeArr = fetch.data.data.likedBy.map(like => like.username)\r\n        setDidUserLike(likeArr.includes(currentUser.displayName))\r\n        setNumOfLikes(fetch.data.data.numOfLikes)\r\n      }\r\n      fetchLikes()\r\n    } else {\r\n      const fetchLikes = async() => {\r\n        const fetch = await axios.get(`${BASE_URL}/likes/${postID}`)\r\n        setNumOfLikes(fetch.data.data.numOfLikes)\r\n      }\r\n      fetchLikes()\r\n    }\r\n  }, [currentUser])\r\n  \r\n  \r\n\r\n\r\n  return (\r\n    <>\r\n      {didUSerLike && didUSerLike !== undefined ? (\r\n\r\n        <button className=\"like__btn\" onClick={dislikePost}>\r\n          <div className={`heart liked ${didUSerLike ? \"is_animating\" : \"\"}`}/>\r\n          \r\n          <span className=\"counter\">\r\n            {numOfLikes}\r\n          </span>\r\n        </button>\r\n      ) : (\r\n        <button className=\"like__btn \" onClick={likePost}>\r\n          <div className=\"heart\"/>\r\n          <span className=\"counter\">\r\n            {numOfLikes}\r\n          </span>\r\n        </button>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default LikeButton\r\n","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\SingleSubreddit\\SingleSubreddit.jsx",["136"],"import React, {useState, useEffect, useContext} from 'react'\r\nimport axios from 'axios'\r\nimport { Skeleton, Stack } from '@chakra-ui/react'\r\nimport Post from '../Reusable/Post/Post'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nimport '../Home/Home.css'\r\nimport SubredditAbout from '../Reusable/SubredditAbout/SubredditAbout'\r\nimport { AuthContext } from '../Context/AuthContext'\r\n\r\nconst SingleSubreddit = () => {\r\n  const { BASE_URL } = useContext(AuthContext)\r\n  const { subreddit } = useParams()\r\n\r\n  const [posts, setPosts] = useState([])\r\n  const [loading, isLoading] = useState(true)\r\n  const [numOfPosts, setNumOfPosts] = useState(0)\r\n\r\n  useEffect(() => {\r\n    //use axios to fetch data from backend\r\n    const fetchData = async() => {\r\n      const posts = await axios.get(`${BASE_URL}/posts/subreddit/${subreddit}`)\r\n      const postArr = posts.data.data.posts\r\n      setPosts(postArr) \r\n      setNumOfPosts(postArr.length)\r\n      isLoading(false)\r\n\r\n    }\r\n\r\n    fetchData()\r\n  }, [])\r\n  return (\r\n    <section className=\"home\">\r\n      <div className=\"home__container\">\r\n        <div className=\"home__posts\">\r\n          {loading ? (\r\n            <>\r\n              <Stack>\r\n                <Skeleton height=\"20px\" />\r\n                <Skeleton height=\"20px\" />\r\n                <Skeleton height=\"20px\" />\r\n\r\n              </Stack>\r\n            </>\r\n          ) : (\r\n            <div className=\"home__flex\">\r\n            \r\n              <div className=\"home__column\">\r\n                {posts.map(post => {\r\n                  return(\r\n                    \r\n                    <Post postID={post.postid} username={post.username} title={post.title} content={post.content} subreddit={post.subreddit} createdAt={post.createdat}/>\r\n                  )\r\n                })}\r\n              </div>\r\n              <SubredditAbout numOfPosts={numOfPosts}/>\r\n            </div>\r\n          )}\r\n          \r\n        </div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default SingleSubreddit","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\Reusable\\SubredditAbout\\SubredditAbout.jsx",["137","138","139"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport axios from 'axios'\r\nimport {useParams} from 'react-router-dom'\r\nimport {ActionButton} from '../Buttons/Buttons'\r\nimport { AuthContext } from '../../Context/AuthContext'\r\n\r\nimport './SubredditAbout.css'\r\n\r\nconst SubredditAbout = ({numOfPosts}) => {\r\n  const {currentUser, BASE_URL } =  useContext(AuthContext)\r\n  const { subreddit } = useParams()\r\n\r\n  const [isFollowing, setIsFollowing] = useState(false)\r\n\r\n  const [about, setAbout] = useState('')\r\n\r\n  const followSubreddit = async() => {\r\n    const formattedDetails = {\r\n      username: await currentUser.displayName,\r\n      subreddit\r\n    }\r\n    const follow = await axios.post(`${BASE_URL}/user/follow/subreddit`, formattedDetails)\r\n    setIsFollowing(true)\r\n  }\r\n\r\n  const unfollowSubreddit = async() => {\r\n    const formattedDetails = {\r\n      username: await currentUser.displayName,\r\n      subreddit\r\n    }\r\n    const unfollow = await axios.post(`${BASE_URL}/user/unfollow/subreddit`, formattedDetails)\r\n    setIsFollowing(false)\r\n\r\n  }\r\n  \r\n\r\n  useEffect(() => {\r\n    const fetchSubredditDetails = async() => {\r\n      const fetchDetails = await axios.get(`${BASE_URL}/subreddits/${subreddit}`)\r\n      setAbout(fetchDetails.data.data.about)\r\n      setIsFollowing(fetchDetails.data.data.followed_by.includes(currentUser.displayName))\r\n    }\r\n\r\n    fetchSubredditDetails()\r\n  },  [])\r\n  return (\r\n    <aside className=\"subreddit_about\">\r\n      <div className=\"subreddit_about__container\">\r\n        <h1 className=\"subreddit_about__title\">TP/{subreddit}</h1>\r\n        <p className=\"subreddit_about__para\">{about}</p>\r\n        <h3 className=\"subreddit_about__posts\"><span className=\"posts__num\">{numOfPosts}</span> Posts</h3>\r\n        \r\n        { isFollowing ? (\r\n          <div className=\"\" onClick={unfollowSubreddit}>\r\n            <ActionButton buttonColor=\"blue\" buttonSize=\"lg\" buttonText=\"Leave\" buttonVariant=\"outlined\" />\r\n          </div>\r\n        ) : (\r\n          <div className=\"\" onClick={followSubreddit}>\r\n            <ActionButton buttonColor=\"blue\" buttonSize=\"lg\" buttonText=\"Join\" buttonVariant=\"filled\" />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </aside>\r\n  )\r\n}\r\n\r\nexport default SubredditAbout\r\n","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\PrivateFeed\\PrivateFeed.jsx",["140"],"import React, {useState, useEffect, useContext} from 'react'\r\nimport axios from 'axios'\r\nimport { Skeleton, Stack } from '@chakra-ui/react'\r\nimport Post from '../Reusable/Post/Post'\r\n\r\nimport '../Home/Home.css'\r\nimport { AuthContext } from '../Context/AuthContext'\r\n\r\nconst PrivateFeed = () => {\r\n  const { currentUser, BASE_URL } = useContext(AuthContext)\r\n\r\n  const [posts, setPosts] = useState([])\r\n  const [loading, isLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    //use axios to fetch data from backend\r\n    const fetchData = async() => {\r\n      const posts = await axios.get(`${BASE_URL}/posts/feed/${currentUser.displayName}`)\r\n      setPosts(posts.data.data.posts) \r\n      isLoading(false)\r\n\r\n    }\r\n\r\n    fetchData()\r\n  }, [])\r\n  return (\r\n    <section className=\"home\">\r\n      <div className=\"home__container\">\r\n        <div className=\"home__posts\">\r\n          {loading ? (\r\n            <>\r\n              <Stack>\r\n                <Skeleton height=\"20px\" />\r\n                <Skeleton height=\"20px\" />\r\n                <Skeleton height=\"20px\" />\r\n\r\n              </Stack>\r\n            </>\r\n          ) : (\r\n            <>\r\n              {posts.map(post => {\r\n                return(\r\n                  \r\n                  <Post postID={post.postid} username={post.username} title={post.title} content={post.content} subreddit={post.subreddit} createdAt={post.createdat}/>\r\n                )\r\n              })}\r\n            </>\r\n          )}\r\n          \r\n        </div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default PrivateFeed","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\UserProfile\\UserProfile.jsx",["141","142","143","144","145","146"],"import React,{ useState, useEffect, useContext } from 'react'\r\nimport axios from 'axios'\r\nimport { AuthContext } from '../Context/AuthContext'\r\nimport { useParams } from 'react-router-dom'\r\nimport UserProfileContent from './UserProfileContent/UserProfileContent'\r\n\r\nimport './UserProfile.css'\r\nimport UserProfileSide from './UserProfileSide/UserProfileSide'\r\n\r\nconst UserProfile = () => {\r\n\r\n\r\n  return (\r\n    <section className=\"user\">\r\n      <div className=\"user__container\">\r\n      <UserProfileSide />\r\n      <UserProfileContent />\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default UserProfile\r\n","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\UserProfile\\UserProfileContent\\UserProfileContent.jsx",["147"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport Post from '../../Reusable/Post/Post'\r\nimport './UserProfileContent.css'\r\nimport { AuthContext } from '../../Context/AuthContext'\r\n\r\n\r\nconst UserProfileContent = () => {\r\n  const { BASE_URL } = useContext(AuthContext)\r\n  const { username } = useParams()\r\n\r\n  const [posts, setPosts] = useState([])\r\n\r\n  useEffect(() => {\r\n    const getPosts = async() => {\r\n      const posts = await axios.get(`${BASE_URL}/posts/user/${username}`)\r\n      console.log(posts)\r\n      setPosts(posts.data.data.posts)\r\n    }\r\n\r\n    getPosts()\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <section className=\"user-profile\">\r\n      <div className=\"user-profile__container\">\r\n        {\r\n          posts.map(post => {\r\n\r\n            return(\r\n              <Post postID={post.postid} content={post.content} username={post.username} title={post.title} createdAt={post.createdat} subreddit={post.subreddit} />\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default UserProfileContent\r\n","C:\\Users\\Lenovo\\Desktop\\PERN-SOCIAL-MEDIA\\client\\src\\Components\\UserProfile\\UserProfileSide\\UserProfileSide.jsx",["148"],"import React, {useState, useEffect, useContext} from 'react'\r\nimport axios from 'axios'\r\nimport { useParams } from 'react-router-dom'\r\nimport { AuthContext } from '../../Context/AuthContext'\r\nimport { Avatar } from '@chakra-ui/react'\r\nimport './UserProfileSide.css'\r\nimport { ActionButton, LinkButton } from '../../Reusable/Buttons/Buttons'\r\nimport { Link } from 'react-router-dom'\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerCloseButton,\r\n  useDisclosure\r\n} from \"@chakra-ui/react\"\r\n\r\n\r\nconst UserProfileSide = () => {\r\n  const { BASE_URL } = useContext(AuthContext)\r\n  const { username } = useParams()\r\n\r\n  const [bio, setBio] = useState()\r\n  const [subreddits, setSubreddits] = useState([])\r\n\r\n  const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n  // const btnRef = React.useRef()\r\n\r\n  useEffect(() => {\r\n    const fetchUser = async() => {\r\n      const userData = await axios.get(`${BASE_URL}/user/details/${username}`)\r\n      setSubreddits(userData.data.data.userDetails.followed_subreddits)\r\n      setBio(userData.data.data.userDetails.bio)\r\n    }\r\n\r\n    fetchUser()\r\n  }, [])\r\n  return (\r\n    <div className=\"user-profile-aside\">\r\n      <div className=\"user-profile-aside__container\">\r\n        <div className=\"user-profile-aside__img\">\r\n          <Avatar name={username} src='https://bit.ly/sage-adebayo' size='lg'/>\r\n        </div>\r\n        <div className=\"user-profile-aside__content\">\r\n          <div className=\"user-profile-aside__col\">\r\n            <h1 className=\"user-profile-aside__username\">\r\n              {username}\r\n            </h1>\r\n            <p className=\"user-profile-aside__bio\">\r\n              {bio}\r\n            </p>\r\n          </div>\r\n          <div className=\"user-profile-aside__following\" onClick={ onOpen }>\r\n            <ActionButton  buttonText={`Following:  ${subreddits.length}`} buttonColor='blue' buttonSize='sm' buttonVariant='filled' />\r\n          </div>\r\n        </div>\r\n        <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        onClose={onClose}\r\n        // finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay colorScheme='facebook'>\r\n          <DrawerContent backgroundColor='#1A202C'>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader color='#4FD1C5' fontFamily='jetbrains mono'>{username} follows</DrawerHeader>\r\n\r\n            <DrawerBody>\r\n              {subreddits.map(subreddit => {\r\n                return(\r\n                  <Link to={`/subreddit/${subreddit}`}>\r\n                    <LinkButton buttonVariant='filled' buttonSize='lg' buttonText={subreddit} m='mx-0' />\r\n                  </Link>\r\n                )\r\n              })}\r\n            </DrawerBody>\r\n\r\n            <DrawerFooter>\r\n              {/* <ActioButton variant=\"outline\" mr={3} onClick={onClose}>\r\n                Cancel\r\n              </ActioButton> */}\r\n              <div onClick={onClose}>\r\n                <ActionButton buttonColor='blue' buttonSize='sm'buttonText='Cancel' buttonVariant='filled' />\r\n              </div>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n\r\n      </div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UserProfileSide",{"ruleId":"149","severity":1,"message":"150","line":5,"column":10,"nodeType":"151","messageId":"152","endLine":5,"endColumn":24},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","replacedBy":"156"},{"ruleId":"149","severity":1,"message":"157","line":9,"column":10,"nodeType":"151","messageId":"152","endLine":9,"endColumn":18},{"ruleId":"149","severity":1,"message":"158","line":14,"column":9,"nodeType":"151","messageId":"152","endLine":14,"endColumn":14},{"ruleId":"149","severity":1,"message":"159","line":15,"column":23,"nodeType":"151","messageId":"152","endLine":15,"endColumn":29},{"ruleId":"149","severity":1,"message":"160","line":4,"column":7,"nodeType":"151","messageId":"152","endLine":4,"endColumn":10},{"ruleId":"161","severity":1,"message":"162","line":27,"column":6,"nodeType":"163","endLine":27,"endColumn":8,"suggestions":"164"},{"ruleId":"149","severity":1,"message":"165","line":6,"column":8,"nodeType":"151","messageId":"152","endLine":6,"endColumn":13},{"ruleId":"161","severity":1,"message":"166","line":14,"column":6,"nodeType":"163","endLine":14,"endColumn":8,"suggestions":"167"},{"ruleId":"149","severity":1,"message":"168","line":3,"column":11,"nodeType":"151","messageId":"152","endLine":3,"endColumn":21},{"ruleId":"161","severity":1,"message":"162","line":99,"column":6,"nodeType":"163","endLine":99,"endColumn":8,"suggestions":"169"},{"ruleId":"161","severity":1,"message":"170","line":82,"column":6,"nodeType":"163","endLine":82,"endColumn":8,"suggestions":"171"},{"ruleId":"149","severity":1,"message":"172","line":12,"column":18,"nodeType":"151","messageId":"152","endLine":12,"endColumn":29},{"ruleId":"149","severity":1,"message":"173","line":1,"column":17,"nodeType":"151","messageId":"152","endLine":1,"endColumn":25},{"ruleId":"161","severity":1,"message":"174","line":23,"column":6,"nodeType":"163","endLine":23,"endColumn":8,"suggestions":"175"},{"ruleId":"149","severity":1,"message":"176","line":1,"column":31,"nodeType":"151","messageId":"152","endLine":1,"endColumn":41},{"ruleId":"149","severity":1,"message":"177","line":11,"column":11,"nodeType":"151","messageId":"152","endLine":11,"endColumn":24},{"ruleId":"149","severity":1,"message":"178","line":21,"column":11,"nodeType":"151","messageId":"152","endLine":21,"endColumn":25},{"ruleId":"149","severity":1,"message":"179","line":47,"column":13,"nodeType":"151","messageId":"152","endLine":47,"endColumn":21},{"ruleId":"161","severity":1,"message":"180","line":80,"column":6,"nodeType":"163","endLine":80,"endColumn":19,"suggestions":"181"},{"ruleId":"161","severity":1,"message":"182","line":31,"column":6,"nodeType":"163","endLine":31,"endColumn":8,"suggestions":"183"},{"ruleId":"149","severity":1,"message":"184","line":22,"column":11,"nodeType":"151","messageId":"152","endLine":22,"endColumn":17},{"ruleId":"149","severity":1,"message":"185","line":31,"column":11,"nodeType":"151","messageId":"152","endLine":31,"endColumn":19},{"ruleId":"161","severity":1,"message":"186","line":45,"column":7,"nodeType":"163","endLine":45,"endColumn":9,"suggestions":"187"},{"ruleId":"161","severity":1,"message":"188","line":25,"column":6,"nodeType":"163","endLine":25,"endColumn":8,"suggestions":"189"},{"ruleId":"149","severity":1,"message":"173","line":1,"column":16,"nodeType":"151","messageId":"152","endLine":1,"endColumn":24},{"ruleId":"149","severity":1,"message":"190","line":1,"column":26,"nodeType":"151","messageId":"152","endLine":1,"endColumn":35},{"ruleId":"149","severity":1,"message":"191","line":1,"column":37,"nodeType":"151","messageId":"152","endLine":1,"endColumn":47},{"ruleId":"149","severity":1,"message":"165","line":2,"column":8,"nodeType":"151","messageId":"152","endLine":2,"endColumn":13},{"ruleId":"149","severity":1,"message":"192","line":3,"column":10,"nodeType":"151","messageId":"152","endLine":3,"endColumn":21},{"ruleId":"149","severity":1,"message":"193","line":4,"column":10,"nodeType":"151","messageId":"152","endLine":4,"endColumn":19},{"ruleId":"161","severity":1,"message":"194","line":23,"column":6,"nodeType":"163","endLine":23,"endColumn":8,"suggestions":"195"},{"ruleId":"161","severity":1,"message":"194","line":40,"column":6,"nodeType":"163","endLine":40,"endColumn":8,"suggestions":"196"},"no-unused-vars","'CommentContext' is defined but never used.","Identifier","unusedVar","no-native-reassign",["197"],"no-negated-in-lhs",["198"],"'GrLogout' is defined but never used.","'toast' is assigned a value but never used.","'logout' is assigned a value but never used.","'app' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'BASE_URL'. Either include it or remove the dependency array.","ArrayExpression",["199"],"'axios' is defined but never used.","React Hook React.useEffect has a missing dependency: 'content'. Either include it or remove the dependency array. If 'setPost' needs the current value of 'content', you can also switch to useReducer instead of useState and read 'content' in the reducer.",["200"],"'IconButton' is defined but never used.",["201"],"React Hook useEffect has missing dependencies: 'BASE_URL', 'currentUser?.displayName', 'postID', and 'username'. Either include them or remove the dependency array.",["202"],"'currentUser' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'BASE_URL', 'postID', and 'storeComments'. Either include them or remove the dependency array.",["203"],"'useReducer' is defined but never used.","'deleteComment' is assigned a value but never used.","'updatedComment' is assigned a value but never used.","'userName' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'BASE_URL' and 'postID'. Either include them or remove the dependency array.",["204"],"React Hook useEffect has missing dependencies: 'BASE_URL' and 'subreddit'. Either include them or remove the dependency array.",["205"],"'follow' is assigned a value but never used.","'unfollow' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'BASE_URL', 'currentUser.displayName', and 'subreddit'. Either include them or remove the dependency array.",["206"],"React Hook useEffect has missing dependencies: 'BASE_URL' and 'currentUser.displayName'. Either include them or remove the dependency array.",["207"],"'useEffect' is defined but never used.","'useContext' is defined but never used.","'AuthContext' is defined but never used.","'useParams' is defined but never used.","React Hook useEffect has missing dependencies: 'BASE_URL' and 'username'. Either include them or remove the dependency array.",["208"],["209"],"no-global-assign","no-unsafe-negation",{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},{"desc":"210","fix":"214"},{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"227","fix":"229"},"Update the dependencies array to be: [BASE_URL]",{"range":"230","text":"231"},"Update the dependencies array to be: [content]",{"range":"232","text":"233"},{"range":"234","text":"231"},"Update the dependencies array to be: [BASE_URL, currentUser?.displayName, postID, username]",{"range":"235","text":"236"},"Update the dependencies array to be: [BASE_URL, postID, storeComments]",{"range":"237","text":"238"},"Update the dependencies array to be: [BASE_URL, currentUser, postID]",{"range":"239","text":"240"},"Update the dependencies array to be: [BASE_URL, subreddit]",{"range":"241","text":"242"},"Update the dependencies array to be: [BASE_URL, currentUser.displayName, subreddit]",{"range":"243","text":"244"},"Update the dependencies array to be: [BASE_URL, currentUser.displayName]",{"range":"245","text":"246"},"Update the dependencies array to be: [BASE_URL, username]",{"range":"247","text":"248"},{"range":"249","text":"248"},[671,673],"[BASE_URL]",[352,354],"[content]",[3158,3160],[2357,2359],"[BASE_URL, currentUser?.displayName, postID, username]",[806,808],"[BASE_URL, postID, storeComments]",[2350,2363],"[BASE_URL, currentUser, postID]",[995,997],"[BASE_URL, subreddit]",[1408,1410],"[BASE_URL, currentUser.displayName, subreddit]",[739,741],"[BASE_URL, currentUser.displayName]",[670,672],"[BASE_URL, username]",[1154,1156]]